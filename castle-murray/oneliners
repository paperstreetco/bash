## creates a database, database user, and assignes all privileges.
## generates a randomized password and only takes one input.
## takes the DB and user name suffix in a read statement.

(
    read -p "db suffix: " sfx
    pfx=$(uapi Mysql get_restrictions|awk '/prefix/ {print $2}')
    name="${pfx}${sfx}"
    pw=$(head /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c15)
    uapi Mysql create_database name="${name}"
    uapi Mysql create_user name="${name}" password="${pw}"
    uapi Mysql set_privileges_on_database user="${name}" database="${name}" privileges=ALL
    echo "Database and user name: "${name}""
    echo "password: "${pw}""
)

## checks if email is pointed at IMH server and then checks for DNS validation records

(
    read -p "domain? " DOMAIN
    if whois $(dig +short $(dig +short mx $DOMAIN))| grep -iq inmotion
    then echo -e "\t\e[38;5;40memail is pointed at InMotion Hosting.\e[0m"
        if dig +short txt ${DOMAIN} | grep -iq "spf"
        then echo -e "\t\e[38;5;40mSPF exists\e[0m"
        else echo -e "\t\e[38;5;196mNO SPF RECORD! \e[0m"
        fi
        if dig +short txt  default._domainkey.${DOMAIN} | grep -iq "dkim"
        then echo -e "\t\e[38;5;40mDKIM exists\e[0m"
        else echo -e "\t\e[38;5;196mNO DMARC RECORD! \e[0m"
        fi
        DMARC=$(dig +short txt  _dmarc.${DOMAIN})
        if echo "$DMARC" | grep -iq "dmarc"
        then echo -e "\t\e[38;5;40mDMARC exists\e[0m"
            if echo "$DMARC" | grep -iq "none"
            then echo  -e "\t\e[38;5;196mBUT IT\'S SET TO NONE!\e[0m"
            fi
        else echo -e "\t\e[38;5;196mNO DMARC RECORD! \e[0m"
        fi
    else echo  -e "\t\e[38;5;196mnot an inmotion email.\e[0m"
    fi
)
