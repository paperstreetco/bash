#! /bin/bash

### Author Sean Murray
## This dig wrapper can take input in the form of a domain.
## what distinguishes this dig wrapper from most others is that it can take a domain copied
## straight from a browser address bar. No need to clean it up or copy only the bit you want.
## you don't even need to remove the subdomain. or run two separate digs to get the info for the
## subdomain and the main domain. pop that bad boy in there. it'll do the rest

## https://
## www.
## you can even leave the /blargablarg on the end.

## First, let's clean up the domain.
sudig(){
predomain=$1
stripped=$(echo "${predomain}" | sed "s#https://##" | sed "s#http://##" | sed "s#www.##" | sed s#/.*##)

## if there IS an a record at the above domain
if dig +short "${stripped}" | grep -E -q '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'; then
    
    ## the following checks if you've entered a subdomain by checking for NS records
    if dig +short ns "${stripped}" | grep -E -q '.'; then ## this for if you've entered a fqdn
        DOMAIN="${stripped}"
        
        ## if you have entered a subdomain this strips it off to check the domain without it
    else subtest=$(echo "${stripped}" | sed '/\..*\./s/^[^.]*\.//')
        
        ## first by checking that we still get an IP.
        if dig +short "${subtest}" | grep -E -q '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'; then
            ## then it checks for NS records again.
            if dig +short ns "${subtest}" | grep -E -q '.'; then
                DOMAIN="${subtest}" ## the FQDN should have them
                echo -e "${stripped} is a subdomain\nIP:\t$(dig +short "${stripped}")"
                
            else ## if not... I don't know what the hell.
                echo "I\'m getting an IP but... it doesn\'t look like we\'re getting any nameserver info...  This won\'t be pretty."
                DOMAIN="${subtest}" ## but we'll try to run it anyway.
                
            fi
        else ## this is for some weird case where somehow it got an IP on the subdomain but NOT after removing said subdomain?
            echo "Something is wrong with this domain... or my code"
            exit
        fi
        
    fi
    ## All the stuff below happens if we don't get an IP on the original IP entered.
    ## either the subdomain doesn't have an A record or the whole domain doesn't have an A record.
    
    ## IF SUBDOMAIN ISN'T REAL OR HAS NO A RECORD
else
    subtest=$(echo "${stripped}" | sed '/\..*\./s/^[^.]*\.//')
    
    ##IF DOMAIN DOES EXST WHEN SUBDOMAIN DOES NOT
    if dig +short "${subtest}" | grep -E -q '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'; then
        if dig +short ns "${subtest}" | grep -E -q '.'; then
            DOMAIN="${subtest}"
            echo "${stripped} Has no A record."
        else
            echo ".... what happened."
            exit
        fi
        
        ## below we have to cover the edge case where we have an NS record but there isn't an A record propagated.
        ## this does happen
    else
        if dig +short ns "${subtest}" | grep -E -q '.'; then
            echo "It looks like ${subtest} is missing an A record"
            DOMAIN="${subtest}"
        else
            echo "${subtest} isn't registered!"
            exit
        fi
    fi
fi

## definitions
whoall=$(whois ${DOMAIN})
ns=$(echo "${whoall}" | awk -F ": " '/Name Server/ {print tolower($2)}' | sort | uniq)
nsip=$(dig +short ${ns})
orgs=$(for ip in ${nsip}; do whois "${ip}" | awk '/OrgName/'; done)
digns=$(dig +short ns ${DOMAIN})
dignsip=$(dig +short ${digns})
dignsorgs=$(for dnip in ${dignsip}; do whois ${dnip} | awk '/OrgName/'; done)
DOMIP=$(dig +short ${DOMAIN})
MXREC=$(dig +short mx ${DOMAIN} | awk '{print $2}' | sed 's/\.$//')
WHODOMIP=$(whois ${DOMIP})

#meat and potatoes

echo "${DOMAIN}"
echo

## I have found that if the whois is showing a different result from dig ns there is a potential issue at the registrar. Therefore it's a good idea to compare them.

echo "WHOIS NS RESULTS "
for i in ${ns}; do echo -e "\t${i}"; done

## this whole section is just to check if the nameservers are custom nameservers on an IMH vps/dedi.
if echo "${ns}" | grep -qi "cloudflare"; then ## 
    true
    elif echo "${ns}" | grep -qiv "inmotion\|webhostinghub\|servconfig"; then
    if echo ${orgs} | grep -qi "inmotion"; then ## this is the part that checks for custom nameservers. If the nameserver is not imh but the ip of the ns IS imh. custom nameserver. BOOM.
        echo -e "\tCustom Nameservers on IMH server."
    fi
fi
echo -e "\nDIG NS RESULTS"
## dig ns results
## same as the whois results really. more reliable though.

for i in ${digns}; do echo -e "\t${i}"; done
if echo "${digns}" | grep -qi "cloudflare"; then
    true
    elif(echo ${digns}) | grep -qiv "inmotion\|webhostinghub\|servconfig"; then
    if echo "${dignsorgs}" | grep -qi "inmotion"; then
        echo -e "\tCustom Nameservers on IMH Server."
    fi
fi
#Registrar

echo -e "\nRegistrar:"
echo "${whoall}" | awk -F ": " '/Registrar:/ {print "\t" $2}'
echo "${whoall}" | awk -F ":" '/Registrar URL:/  {print "\t" $3}' | sed -e 's#//www.##' -e 's#//##' | uniq
#Expiration
echo -e "\nDomain expiration:"
echo "${whoall}" | awk -F "[:T]" '/Expir/ {print "\t" $2}' | uniq

# is the domain on an inmotion IP address?

echo -e "\nInMotion IP?"
if echo ${WHODOMIP} | grep -i -q inmotion
then echo -e "\tYES! "
else
    echo -e "\tNO! "
fi
for IP in ${DOMIP}; do
    echo -e "\t${IP}"
done
echo
# This is to detect if there are more than one A records pointed at different locations.
for ip in ${DOMIP}; do
    echo ${ip}
    whois ${ip} | awk -F":" '/OrgName:/ {print "\t" $2}' | sed -e 's/ //g'
done
echo

# Hostname for ip
echo "Hostname:"
## checks if the hostname contains IMH or similar domain.
if echo "${WHODOMIP}"  | grep -iq "cloudflare"
then echo "Cloudflare IP! not able to run host" | awk '{print "\t" $0}'
else echo -e "\t$(dig +short -x "${DOMIP}")"
fi
echo

# MX records

echo "MX records:"
if echo ${MXREC} | grep -q "SOA"
then echo -e " \t NO MX RECORD"
    ## checking if domain is using an email service
elif echo ${MXREC} | grep -q -i "google\|outlook\|proton"
then echo -e "Using Email service" | awk '{print "\t" $0}'
    echo "${MXREC}" | awk '{print "\t\t" $0}'
    ## checking if the email is pointed to an IMH ip.
else
    echo "${MXREC}" | awk '{print "\tMX Domain:\t" $0}'
    mxip=$(dig +short ${MXREC})
    echo "${mxip}" | awk '{print "\tMX IP:\t\t" $0}'
    echo -e "\tMX PTR:\t\t$(dig +short -x ${mxip})"
    
    ## This part checks for cPanel standard format email validation dns records
    ## if the MX record is pointed to an IMH IP address.
    
    if whois $(dig +short ${MXREC}) | grep -iq inmotion
    then echo -e "\temail is pointed at IMH."
        if dig +short txt ${DOMAIN} | grep -iq "spf"
        then echo -e "\tSPF exists"
        else
            echo -e "\tNO SPF RECORD! "
        fi
        if dig +short txt default._domainkey.${DOMAIN} | grep -iq "dkim"
        then echo -e "\tDKIM exists"
        else
            echo -e "\tNO DKIM RECORD! "
        fi
        DMARC=$(dig +short txt _dmarc.${DOMAIN})
        if echo "${DMARC}" | grep -iq "dmarc"
        then echo -e "\tDMARC exists"
            if echo "${DMARC}" | grep -iq 'reject\|quarantine'
            then true
            else
                echo -e "\tBUT IT\'S SET TO NONE! "
            fi
        else
            echo -e "\tNO DMARC RECORD! "
        fi
        ## and if it is not an IMH IP...
    else
        echo -e "memail is not pointed at IMH."
    fi
fi
}

case $1 in
-h|--help|"")
    echo -e """\nThis script takes a domain as an input
with or without https:// 
with or without www. 
with or without a subdomain. 
with or without a subdirectory

example : sudig https://dev.testdomain.com/subdir

You can paste straight from the browser address bar. 
"""
;;
*)
   sudig $1
;;
esac
